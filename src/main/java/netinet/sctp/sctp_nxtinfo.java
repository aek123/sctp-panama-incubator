// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_nxtinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("nxt_sid"),
        Constants$root.C_SHORT$LAYOUT.withName("nxt_flags"),
        Constants$root.C_INT$LAYOUT.withName("nxt_ppid"),
        Constants$root.C_INT$LAYOUT.withName("nxt_length"),
        Constants$root.C_INT$LAYOUT.withName("nxt_assoc_id")
    ).withName("sctp_nxtinfo");
    public static MemoryLayout $LAYOUT() {
        return sctp_nxtinfo.$struct$LAYOUT;
    }
    static final VarHandle nxt_sid$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("nxt_sid"));
    public static VarHandle nxt_sid$VH() {
        return sctp_nxtinfo.nxt_sid$VH;
    }
    public static short nxt_sid$get(MemorySegment seg) {
        return (short)sctp_nxtinfo.nxt_sid$VH.get(seg);
    }
    public static void nxt_sid$set( MemorySegment seg, short x) {
        sctp_nxtinfo.nxt_sid$VH.set(seg, x);
    }
    public static short nxt_sid$get(MemorySegment seg, long index) {
        return (short)sctp_nxtinfo.nxt_sid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nxt_sid$set(MemorySegment seg, long index, short x) {
        sctp_nxtinfo.nxt_sid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nxt_flags$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("nxt_flags"));
    public static VarHandle nxt_flags$VH() {
        return sctp_nxtinfo.nxt_flags$VH;
    }
    public static short nxt_flags$get(MemorySegment seg) {
        return (short)sctp_nxtinfo.nxt_flags$VH.get(seg);
    }
    public static void nxt_flags$set( MemorySegment seg, short x) {
        sctp_nxtinfo.nxt_flags$VH.set(seg, x);
    }
    public static short nxt_flags$get(MemorySegment seg, long index) {
        return (short)sctp_nxtinfo.nxt_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nxt_flags$set(MemorySegment seg, long index, short x) {
        sctp_nxtinfo.nxt_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nxt_ppid$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("nxt_ppid"));
    public static VarHandle nxt_ppid$VH() {
        return sctp_nxtinfo.nxt_ppid$VH;
    }
    public static int nxt_ppid$get(MemorySegment seg) {
        return (int)sctp_nxtinfo.nxt_ppid$VH.get(seg);
    }
    public static void nxt_ppid$set( MemorySegment seg, int x) {
        sctp_nxtinfo.nxt_ppid$VH.set(seg, x);
    }
    public static int nxt_ppid$get(MemorySegment seg, long index) {
        return (int)sctp_nxtinfo.nxt_ppid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nxt_ppid$set(MemorySegment seg, long index, int x) {
        sctp_nxtinfo.nxt_ppid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nxt_length$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("nxt_length"));
    public static VarHandle nxt_length$VH() {
        return sctp_nxtinfo.nxt_length$VH;
    }
    public static int nxt_length$get(MemorySegment seg) {
        return (int)sctp_nxtinfo.nxt_length$VH.get(seg);
    }
    public static void nxt_length$set( MemorySegment seg, int x) {
        sctp_nxtinfo.nxt_length$VH.set(seg, x);
    }
    public static int nxt_length$get(MemorySegment seg, long index) {
        return (int)sctp_nxtinfo.nxt_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nxt_length$set(MemorySegment seg, long index, int x) {
        sctp_nxtinfo.nxt_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nxt_assoc_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("nxt_assoc_id"));
    public static VarHandle nxt_assoc_id$VH() {
        return sctp_nxtinfo.nxt_assoc_id$VH;
    }
    public static int nxt_assoc_id$get(MemorySegment seg) {
        return (int)sctp_nxtinfo.nxt_assoc_id$VH.get(seg);
    }
    public static void nxt_assoc_id$set( MemorySegment seg, int x) {
        sctp_nxtinfo.nxt_assoc_id$VH.set(seg, x);
    }
    public static int nxt_assoc_id$get(MemorySegment seg, long index) {
        return (int)sctp_nxtinfo.nxt_assoc_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nxt_assoc_id$set(MemorySegment seg, long index, int x) {
        sctp_nxtinfo.nxt_assoc_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


