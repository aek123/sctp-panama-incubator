// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_paddrparams {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("spp_assoc_id"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("ss_family"),
            MemoryLayout.sequenceLayout(118, Constants$root.C_CHAR$LAYOUT).withName("__ss_padding"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__ss_align")
        ).withName("spp_address"),
        Constants$root.C_INT$LAYOUT.withName("spp_hbinterval"),
        Constants$root.C_SHORT$LAYOUT.withName("spp_pathmaxrxt"),
        Constants$root.C_INT$LAYOUT.withName("spp_pathmtu"),
        Constants$root.C_INT$LAYOUT.withName("spp_sackdelay"),
        Constants$root.C_INT$LAYOUT.withName("spp_flags"),
        Constants$root.C_INT$LAYOUT.withName("spp_ipv6_flowlabel"),
        Constants$root.C_CHAR$LAYOUT.withName("spp_dscp"),
        MemoryLayout.paddingLayout(8)
    ).withName("sctp_paddrparams");
    public static MemoryLayout $LAYOUT() {
        return sctp_paddrparams.$struct$LAYOUT;
    }
    static final VarHandle spp_assoc_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("spp_assoc_id"));
    public static VarHandle spp_assoc_id$VH() {
        return sctp_paddrparams.spp_assoc_id$VH;
    }
    public static int spp_assoc_id$get(MemorySegment seg) {
        return (int)sctp_paddrparams.spp_assoc_id$VH.get(seg);
    }
    public static void spp_assoc_id$set( MemorySegment seg, int x) {
        sctp_paddrparams.spp_assoc_id$VH.set(seg, x);
    }
    public static int spp_assoc_id$get(MemorySegment seg, long index) {
        return (int)sctp_paddrparams.spp_assoc_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_assoc_id$set(MemorySegment seg, long index, int x) {
        sctp_paddrparams.spp_assoc_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment spp_address$slice(MemorySegment seg) {
        return seg.asSlice(4, 128);
    }
    static final VarHandle spp_hbinterval$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("spp_hbinterval"));
    public static VarHandle spp_hbinterval$VH() {
        return sctp_paddrparams.spp_hbinterval$VH;
    }
    public static int spp_hbinterval$get(MemorySegment seg) {
        return (int)sctp_paddrparams.spp_hbinterval$VH.get(seg);
    }
    public static void spp_hbinterval$set( MemorySegment seg, int x) {
        sctp_paddrparams.spp_hbinterval$VH.set(seg, x);
    }
    public static int spp_hbinterval$get(MemorySegment seg, long index) {
        return (int)sctp_paddrparams.spp_hbinterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_hbinterval$set(MemorySegment seg, long index, int x) {
        sctp_paddrparams.spp_hbinterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle spp_pathmaxrxt$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("spp_pathmaxrxt"));
    public static VarHandle spp_pathmaxrxt$VH() {
        return sctp_paddrparams.spp_pathmaxrxt$VH;
    }
    public static short spp_pathmaxrxt$get(MemorySegment seg) {
        return (short)sctp_paddrparams.spp_pathmaxrxt$VH.get(seg);
    }
    public static void spp_pathmaxrxt$set( MemorySegment seg, short x) {
        sctp_paddrparams.spp_pathmaxrxt$VH.set(seg, x);
    }
    public static short spp_pathmaxrxt$get(MemorySegment seg, long index) {
        return (short)sctp_paddrparams.spp_pathmaxrxt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_pathmaxrxt$set(MemorySegment seg, long index, short x) {
        sctp_paddrparams.spp_pathmaxrxt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle spp_pathmtu$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("spp_pathmtu"));
    public static VarHandle spp_pathmtu$VH() {
        return sctp_paddrparams.spp_pathmtu$VH;
    }
    public static int spp_pathmtu$get(MemorySegment seg) {
        return (int)sctp_paddrparams.spp_pathmtu$VH.get(seg);
    }
    public static void spp_pathmtu$set( MemorySegment seg, int x) {
        sctp_paddrparams.spp_pathmtu$VH.set(seg, x);
    }
    public static int spp_pathmtu$get(MemorySegment seg, long index) {
        return (int)sctp_paddrparams.spp_pathmtu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_pathmtu$set(MemorySegment seg, long index, int x) {
        sctp_paddrparams.spp_pathmtu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle spp_sackdelay$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("spp_sackdelay"));
    public static VarHandle spp_sackdelay$VH() {
        return sctp_paddrparams.spp_sackdelay$VH;
    }
    public static int spp_sackdelay$get(MemorySegment seg) {
        return (int)sctp_paddrparams.spp_sackdelay$VH.get(seg);
    }
    public static void spp_sackdelay$set( MemorySegment seg, int x) {
        sctp_paddrparams.spp_sackdelay$VH.set(seg, x);
    }
    public static int spp_sackdelay$get(MemorySegment seg, long index) {
        return (int)sctp_paddrparams.spp_sackdelay$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_sackdelay$set(MemorySegment seg, long index, int x) {
        sctp_paddrparams.spp_sackdelay$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle spp_flags$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("spp_flags"));
    public static VarHandle spp_flags$VH() {
        return sctp_paddrparams.spp_flags$VH;
    }
    public static int spp_flags$get(MemorySegment seg) {
        return (int)sctp_paddrparams.spp_flags$VH.get(seg);
    }
    public static void spp_flags$set( MemorySegment seg, int x) {
        sctp_paddrparams.spp_flags$VH.set(seg, x);
    }
    public static int spp_flags$get(MemorySegment seg, long index) {
        return (int)sctp_paddrparams.spp_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_flags$set(MemorySegment seg, long index, int x) {
        sctp_paddrparams.spp_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle spp_ipv6_flowlabel$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("spp_ipv6_flowlabel"));
    public static VarHandle spp_ipv6_flowlabel$VH() {
        return sctp_paddrparams.spp_ipv6_flowlabel$VH;
    }
    public static int spp_ipv6_flowlabel$get(MemorySegment seg) {
        return (int)sctp_paddrparams.spp_ipv6_flowlabel$VH.get(seg);
    }
    public static void spp_ipv6_flowlabel$set( MemorySegment seg, int x) {
        sctp_paddrparams.spp_ipv6_flowlabel$VH.set(seg, x);
    }
    public static int spp_ipv6_flowlabel$get(MemorySegment seg, long index) {
        return (int)sctp_paddrparams.spp_ipv6_flowlabel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_ipv6_flowlabel$set(MemorySegment seg, long index, int x) {
        sctp_paddrparams.spp_ipv6_flowlabel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle spp_dscp$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("spp_dscp"));
    public static VarHandle spp_dscp$VH() {
        return sctp_paddrparams.spp_dscp$VH;
    }
    public static byte spp_dscp$get(MemorySegment seg) {
        return (byte)sctp_paddrparams.spp_dscp$VH.get(seg);
    }
    public static void spp_dscp$set( MemorySegment seg, byte x) {
        sctp_paddrparams.spp_dscp$VH.set(seg, x);
    }
    public static byte spp_dscp$get(MemorySegment seg, long index) {
        return (byte)sctp_paddrparams.spp_dscp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spp_dscp$set(MemorySegment seg, long index, byte x) {
        sctp_paddrparams.spp_dscp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


