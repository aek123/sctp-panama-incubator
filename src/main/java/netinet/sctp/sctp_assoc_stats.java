// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_assoc_stats {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("sas_assoc_id"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("ss_family"),
            MemoryLayout.sequenceLayout(118, Constants$root.C_CHAR$LAYOUT).withName("__ss_padding"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__ss_align")
        ).withName("sas_obs_rto_ipaddr"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_maxrto"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_isacks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_osacks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_opackets"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_ipackets"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_rtxchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_outofseqtsns"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_idupchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_gapcnt"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_ouodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_iuodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_oodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_iodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_octrlchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sas_ictrlchunks")
    ).withName("sctp_assoc_stats");
    public static MemoryLayout $LAYOUT() {
        return sctp_assoc_stats.$struct$LAYOUT;
    }
    static final VarHandle sas_assoc_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_assoc_id"));
    public static VarHandle sas_assoc_id$VH() {
        return sctp_assoc_stats.sas_assoc_id$VH;
    }
    public static int sas_assoc_id$get(MemorySegment seg) {
        return (int)sctp_assoc_stats.sas_assoc_id$VH.get(seg);
    }
    public static void sas_assoc_id$set( MemorySegment seg, int x) {
        sctp_assoc_stats.sas_assoc_id$VH.set(seg, x);
    }
    public static int sas_assoc_id$get(MemorySegment seg, long index) {
        return (int)sctp_assoc_stats.sas_assoc_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_assoc_id$set(MemorySegment seg, long index, int x) {
        sctp_assoc_stats.sas_assoc_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sas_obs_rto_ipaddr$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    static final VarHandle sas_maxrto$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_maxrto"));
    public static VarHandle sas_maxrto$VH() {
        return sctp_assoc_stats.sas_maxrto$VH;
    }
    public static long sas_maxrto$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_maxrto$VH.get(seg);
    }
    public static void sas_maxrto$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_maxrto$VH.set(seg, x);
    }
    public static long sas_maxrto$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_maxrto$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_maxrto$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_maxrto$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_isacks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_isacks"));
    public static VarHandle sas_isacks$VH() {
        return sctp_assoc_stats.sas_isacks$VH;
    }
    public static long sas_isacks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_isacks$VH.get(seg);
    }
    public static void sas_isacks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_isacks$VH.set(seg, x);
    }
    public static long sas_isacks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_isacks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_isacks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_isacks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_osacks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_osacks"));
    public static VarHandle sas_osacks$VH() {
        return sctp_assoc_stats.sas_osacks$VH;
    }
    public static long sas_osacks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_osacks$VH.get(seg);
    }
    public static void sas_osacks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_osacks$VH.set(seg, x);
    }
    public static long sas_osacks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_osacks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_osacks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_osacks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_opackets$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_opackets"));
    public static VarHandle sas_opackets$VH() {
        return sctp_assoc_stats.sas_opackets$VH;
    }
    public static long sas_opackets$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_opackets$VH.get(seg);
    }
    public static void sas_opackets$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_opackets$VH.set(seg, x);
    }
    public static long sas_opackets$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_opackets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_opackets$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_opackets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_ipackets$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_ipackets"));
    public static VarHandle sas_ipackets$VH() {
        return sctp_assoc_stats.sas_ipackets$VH;
    }
    public static long sas_ipackets$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_ipackets$VH.get(seg);
    }
    public static void sas_ipackets$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_ipackets$VH.set(seg, x);
    }
    public static long sas_ipackets$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_ipackets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_ipackets$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_ipackets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_rtxchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_rtxchunks"));
    public static VarHandle sas_rtxchunks$VH() {
        return sctp_assoc_stats.sas_rtxchunks$VH;
    }
    public static long sas_rtxchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_rtxchunks$VH.get(seg);
    }
    public static void sas_rtxchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_rtxchunks$VH.set(seg, x);
    }
    public static long sas_rtxchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_rtxchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_rtxchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_rtxchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_outofseqtsns$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_outofseqtsns"));
    public static VarHandle sas_outofseqtsns$VH() {
        return sctp_assoc_stats.sas_outofseqtsns$VH;
    }
    public static long sas_outofseqtsns$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_outofseqtsns$VH.get(seg);
    }
    public static void sas_outofseqtsns$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_outofseqtsns$VH.set(seg, x);
    }
    public static long sas_outofseqtsns$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_outofseqtsns$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_outofseqtsns$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_outofseqtsns$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_idupchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_idupchunks"));
    public static VarHandle sas_idupchunks$VH() {
        return sctp_assoc_stats.sas_idupchunks$VH;
    }
    public static long sas_idupchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_idupchunks$VH.get(seg);
    }
    public static void sas_idupchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_idupchunks$VH.set(seg, x);
    }
    public static long sas_idupchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_idupchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_idupchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_idupchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_gapcnt$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_gapcnt"));
    public static VarHandle sas_gapcnt$VH() {
        return sctp_assoc_stats.sas_gapcnt$VH;
    }
    public static long sas_gapcnt$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_gapcnt$VH.get(seg);
    }
    public static void sas_gapcnt$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_gapcnt$VH.set(seg, x);
    }
    public static long sas_gapcnt$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_gapcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_gapcnt$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_gapcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_ouodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_ouodchunks"));
    public static VarHandle sas_ouodchunks$VH() {
        return sctp_assoc_stats.sas_ouodchunks$VH;
    }
    public static long sas_ouodchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_ouodchunks$VH.get(seg);
    }
    public static void sas_ouodchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_ouodchunks$VH.set(seg, x);
    }
    public static long sas_ouodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_ouodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_ouodchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_ouodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_iuodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_iuodchunks"));
    public static VarHandle sas_iuodchunks$VH() {
        return sctp_assoc_stats.sas_iuodchunks$VH;
    }
    public static long sas_iuodchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_iuodchunks$VH.get(seg);
    }
    public static void sas_iuodchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_iuodchunks$VH.set(seg, x);
    }
    public static long sas_iuodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_iuodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_iuodchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_iuodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_oodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_oodchunks"));
    public static VarHandle sas_oodchunks$VH() {
        return sctp_assoc_stats.sas_oodchunks$VH;
    }
    public static long sas_oodchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_oodchunks$VH.get(seg);
    }
    public static void sas_oodchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_oodchunks$VH.set(seg, x);
    }
    public static long sas_oodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_oodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_oodchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_oodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_iodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_iodchunks"));
    public static VarHandle sas_iodchunks$VH() {
        return sctp_assoc_stats.sas_iodchunks$VH;
    }
    public static long sas_iodchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_iodchunks$VH.get(seg);
    }
    public static void sas_iodchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_iodchunks$VH.set(seg, x);
    }
    public static long sas_iodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_iodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_iodchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_iodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_octrlchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_octrlchunks"));
    public static VarHandle sas_octrlchunks$VH() {
        return sctp_assoc_stats.sas_octrlchunks$VH;
    }
    public static long sas_octrlchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_octrlchunks$VH.get(seg);
    }
    public static void sas_octrlchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_octrlchunks$VH.set(seg, x);
    }
    public static long sas_octrlchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_octrlchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_octrlchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_octrlchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sas_ictrlchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sas_ictrlchunks"));
    public static VarHandle sas_ictrlchunks$VH() {
        return sctp_assoc_stats.sas_ictrlchunks$VH;
    }
    public static long sas_ictrlchunks$get(MemorySegment seg) {
        return (long)sctp_assoc_stats.sas_ictrlchunks$VH.get(seg);
    }
    public static void sas_ictrlchunks$set( MemorySegment seg, long x) {
        sctp_assoc_stats.sas_ictrlchunks$VH.set(seg, x);
    }
    public static long sas_ictrlchunks$get(MemorySegment seg, long index) {
        return (long)sctp_assoc_stats.sas_ictrlchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sas_ictrlchunks$set(MemorySegment seg, long index, long x) {
        sctp_assoc_stats.sas_ictrlchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


