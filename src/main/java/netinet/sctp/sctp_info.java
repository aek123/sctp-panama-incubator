// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_info {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("sctpi_tag"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_state"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_rwnd"),
        Constants$root.C_SHORT$LAYOUT.withName("sctpi_unackdata"),
        Constants$root.C_SHORT$LAYOUT.withName("sctpi_penddata"),
        Constants$root.C_SHORT$LAYOUT.withName("sctpi_instrms"),
        Constants$root.C_SHORT$LAYOUT.withName("sctpi_outstrms"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_fragmentation_point"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_inqueue"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_outqueue"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_overall_error"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_max_burst"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_maxseg"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_peer_rwnd"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_peer_tag"),
        Constants$root.C_CHAR$LAYOUT.withName("sctpi_peer_capable"),
        Constants$root.C_CHAR$LAYOUT.withName("sctpi_peer_sack"),
        Constants$root.C_SHORT$LAYOUT.withName("__reserved1"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_isacks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_osacks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_opackets"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_ipackets"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_rtxchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_outofseqtsns"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_idupchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_gapcnt"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_ouodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_iuodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_oodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_iodchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_octrlchunks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sctpi_ictrlchunks"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("ss_family"),
            MemoryLayout.sequenceLayout(118, Constants$root.C_CHAR$LAYOUT).withName("__ss_padding"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__ss_align")
        ).withName("sctpi_p_address"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_state"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_cwnd"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_srtt"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_rto"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_hbinterval"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_pathmaxrxt"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_sackdelay"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_sackfreq"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_ssthresh"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_partial_bytes_acked"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_p_flight_size"),
        Constants$root.C_SHORT$LAYOUT.withName("sctpi_p_error"),
        Constants$root.C_SHORT$LAYOUT.withName("__reserved2"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_s_autoclose"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_s_adaptation_ind"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_s_pd_point"),
        Constants$root.C_CHAR$LAYOUT.withName("sctpi_s_nodelay"),
        Constants$root.C_CHAR$LAYOUT.withName("sctpi_s_disable_fragments"),
        Constants$root.C_CHAR$LAYOUT.withName("sctpi_s_v4mapped"),
        Constants$root.C_CHAR$LAYOUT.withName("sctpi_s_frag_interleave"),
        Constants$root.C_INT$LAYOUT.withName("sctpi_s_type"),
        Constants$root.C_INT$LAYOUT.withName("__reserved3")
    ).withName("sctp_info");
    public static MemoryLayout $LAYOUT() {
        return sctp_info.$struct$LAYOUT;
    }
    static final VarHandle sctpi_tag$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_tag"));
    public static VarHandle sctpi_tag$VH() {
        return sctp_info.sctpi_tag$VH;
    }
    public static int sctpi_tag$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_tag$VH.get(seg);
    }
    public static void sctpi_tag$set( MemorySegment seg, int x) {
        sctp_info.sctpi_tag$VH.set(seg, x);
    }
    public static int sctpi_tag$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_tag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_tag$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_tag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_state"));
    public static VarHandle sctpi_state$VH() {
        return sctp_info.sctpi_state$VH;
    }
    public static int sctpi_state$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_state$VH.get(seg);
    }
    public static void sctpi_state$set( MemorySegment seg, int x) {
        sctp_info.sctpi_state$VH.set(seg, x);
    }
    public static int sctpi_state$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_state$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_rwnd$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_rwnd"));
    public static VarHandle sctpi_rwnd$VH() {
        return sctp_info.sctpi_rwnd$VH;
    }
    public static int sctpi_rwnd$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_rwnd$VH.get(seg);
    }
    public static void sctpi_rwnd$set( MemorySegment seg, int x) {
        sctp_info.sctpi_rwnd$VH.set(seg, x);
    }
    public static int sctpi_rwnd$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_rwnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_rwnd$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_rwnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_unackdata$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_unackdata"));
    public static VarHandle sctpi_unackdata$VH() {
        return sctp_info.sctpi_unackdata$VH;
    }
    public static short sctpi_unackdata$get(MemorySegment seg) {
        return (short)sctp_info.sctpi_unackdata$VH.get(seg);
    }
    public static void sctpi_unackdata$set( MemorySegment seg, short x) {
        sctp_info.sctpi_unackdata$VH.set(seg, x);
    }
    public static short sctpi_unackdata$get(MemorySegment seg, long index) {
        return (short)sctp_info.sctpi_unackdata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_unackdata$set(MemorySegment seg, long index, short x) {
        sctp_info.sctpi_unackdata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_penddata$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_penddata"));
    public static VarHandle sctpi_penddata$VH() {
        return sctp_info.sctpi_penddata$VH;
    }
    public static short sctpi_penddata$get(MemorySegment seg) {
        return (short)sctp_info.sctpi_penddata$VH.get(seg);
    }
    public static void sctpi_penddata$set( MemorySegment seg, short x) {
        sctp_info.sctpi_penddata$VH.set(seg, x);
    }
    public static short sctpi_penddata$get(MemorySegment seg, long index) {
        return (short)sctp_info.sctpi_penddata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_penddata$set(MemorySegment seg, long index, short x) {
        sctp_info.sctpi_penddata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_instrms$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_instrms"));
    public static VarHandle sctpi_instrms$VH() {
        return sctp_info.sctpi_instrms$VH;
    }
    public static short sctpi_instrms$get(MemorySegment seg) {
        return (short)sctp_info.sctpi_instrms$VH.get(seg);
    }
    public static void sctpi_instrms$set( MemorySegment seg, short x) {
        sctp_info.sctpi_instrms$VH.set(seg, x);
    }
    public static short sctpi_instrms$get(MemorySegment seg, long index) {
        return (short)sctp_info.sctpi_instrms$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_instrms$set(MemorySegment seg, long index, short x) {
        sctp_info.sctpi_instrms$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_outstrms$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_outstrms"));
    public static VarHandle sctpi_outstrms$VH() {
        return sctp_info.sctpi_outstrms$VH;
    }
    public static short sctpi_outstrms$get(MemorySegment seg) {
        return (short)sctp_info.sctpi_outstrms$VH.get(seg);
    }
    public static void sctpi_outstrms$set( MemorySegment seg, short x) {
        sctp_info.sctpi_outstrms$VH.set(seg, x);
    }
    public static short sctpi_outstrms$get(MemorySegment seg, long index) {
        return (short)sctp_info.sctpi_outstrms$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_outstrms$set(MemorySegment seg, long index, short x) {
        sctp_info.sctpi_outstrms$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_fragmentation_point$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_fragmentation_point"));
    public static VarHandle sctpi_fragmentation_point$VH() {
        return sctp_info.sctpi_fragmentation_point$VH;
    }
    public static int sctpi_fragmentation_point$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_fragmentation_point$VH.get(seg);
    }
    public static void sctpi_fragmentation_point$set( MemorySegment seg, int x) {
        sctp_info.sctpi_fragmentation_point$VH.set(seg, x);
    }
    public static int sctpi_fragmentation_point$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_fragmentation_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_fragmentation_point$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_fragmentation_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_inqueue$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_inqueue"));
    public static VarHandle sctpi_inqueue$VH() {
        return sctp_info.sctpi_inqueue$VH;
    }
    public static int sctpi_inqueue$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_inqueue$VH.get(seg);
    }
    public static void sctpi_inqueue$set( MemorySegment seg, int x) {
        sctp_info.sctpi_inqueue$VH.set(seg, x);
    }
    public static int sctpi_inqueue$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_inqueue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_inqueue$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_inqueue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_outqueue$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_outqueue"));
    public static VarHandle sctpi_outqueue$VH() {
        return sctp_info.sctpi_outqueue$VH;
    }
    public static int sctpi_outqueue$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_outqueue$VH.get(seg);
    }
    public static void sctpi_outqueue$set( MemorySegment seg, int x) {
        sctp_info.sctpi_outqueue$VH.set(seg, x);
    }
    public static int sctpi_outqueue$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_outqueue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_outqueue$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_outqueue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_overall_error$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_overall_error"));
    public static VarHandle sctpi_overall_error$VH() {
        return sctp_info.sctpi_overall_error$VH;
    }
    public static int sctpi_overall_error$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_overall_error$VH.get(seg);
    }
    public static void sctpi_overall_error$set( MemorySegment seg, int x) {
        sctp_info.sctpi_overall_error$VH.set(seg, x);
    }
    public static int sctpi_overall_error$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_overall_error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_overall_error$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_overall_error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_max_burst$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_max_burst"));
    public static VarHandle sctpi_max_burst$VH() {
        return sctp_info.sctpi_max_burst$VH;
    }
    public static int sctpi_max_burst$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_max_burst$VH.get(seg);
    }
    public static void sctpi_max_burst$set( MemorySegment seg, int x) {
        sctp_info.sctpi_max_burst$VH.set(seg, x);
    }
    public static int sctpi_max_burst$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_max_burst$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_max_burst$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_max_burst$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_maxseg$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_maxseg"));
    public static VarHandle sctpi_maxseg$VH() {
        return sctp_info.sctpi_maxseg$VH;
    }
    public static int sctpi_maxseg$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_maxseg$VH.get(seg);
    }
    public static void sctpi_maxseg$set( MemorySegment seg, int x) {
        sctp_info.sctpi_maxseg$VH.set(seg, x);
    }
    public static int sctpi_maxseg$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_maxseg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_maxseg$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_maxseg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_peer_rwnd$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_peer_rwnd"));
    public static VarHandle sctpi_peer_rwnd$VH() {
        return sctp_info.sctpi_peer_rwnd$VH;
    }
    public static int sctpi_peer_rwnd$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_peer_rwnd$VH.get(seg);
    }
    public static void sctpi_peer_rwnd$set( MemorySegment seg, int x) {
        sctp_info.sctpi_peer_rwnd$VH.set(seg, x);
    }
    public static int sctpi_peer_rwnd$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_peer_rwnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_peer_rwnd$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_peer_rwnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_peer_tag$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_peer_tag"));
    public static VarHandle sctpi_peer_tag$VH() {
        return sctp_info.sctpi_peer_tag$VH;
    }
    public static int sctpi_peer_tag$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_peer_tag$VH.get(seg);
    }
    public static void sctpi_peer_tag$set( MemorySegment seg, int x) {
        sctp_info.sctpi_peer_tag$VH.set(seg, x);
    }
    public static int sctpi_peer_tag$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_peer_tag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_peer_tag$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_peer_tag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_peer_capable$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_peer_capable"));
    public static VarHandle sctpi_peer_capable$VH() {
        return sctp_info.sctpi_peer_capable$VH;
    }
    public static byte sctpi_peer_capable$get(MemorySegment seg) {
        return (byte)sctp_info.sctpi_peer_capable$VH.get(seg);
    }
    public static void sctpi_peer_capable$set( MemorySegment seg, byte x) {
        sctp_info.sctpi_peer_capable$VH.set(seg, x);
    }
    public static byte sctpi_peer_capable$get(MemorySegment seg, long index) {
        return (byte)sctp_info.sctpi_peer_capable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_peer_capable$set(MemorySegment seg, long index, byte x) {
        sctp_info.sctpi_peer_capable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_peer_sack$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_peer_sack"));
    public static VarHandle sctpi_peer_sack$VH() {
        return sctp_info.sctpi_peer_sack$VH;
    }
    public static byte sctpi_peer_sack$get(MemorySegment seg) {
        return (byte)sctp_info.sctpi_peer_sack$VH.get(seg);
    }
    public static void sctpi_peer_sack$set( MemorySegment seg, byte x) {
        sctp_info.sctpi_peer_sack$VH.set(seg, x);
    }
    public static byte sctpi_peer_sack$get(MemorySegment seg, long index) {
        return (byte)sctp_info.sctpi_peer_sack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_peer_sack$set(MemorySegment seg, long index, byte x) {
        sctp_info.sctpi_peer_sack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __reserved1$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("__reserved1"));
    public static VarHandle __reserved1$VH() {
        return sctp_info.__reserved1$VH;
    }
    public static short __reserved1$get(MemorySegment seg) {
        return (short)sctp_info.__reserved1$VH.get(seg);
    }
    public static void __reserved1$set( MemorySegment seg, short x) {
        sctp_info.__reserved1$VH.set(seg, x);
    }
    public static short __reserved1$get(MemorySegment seg, long index) {
        return (short)sctp_info.__reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __reserved1$set(MemorySegment seg, long index, short x) {
        sctp_info.__reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_isacks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_isacks"));
    public static VarHandle sctpi_isacks$VH() {
        return sctp_info.sctpi_isacks$VH;
    }
    public static long sctpi_isacks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_isacks$VH.get(seg);
    }
    public static void sctpi_isacks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_isacks$VH.set(seg, x);
    }
    public static long sctpi_isacks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_isacks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_isacks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_isacks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_osacks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_osacks"));
    public static VarHandle sctpi_osacks$VH() {
        return sctp_info.sctpi_osacks$VH;
    }
    public static long sctpi_osacks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_osacks$VH.get(seg);
    }
    public static void sctpi_osacks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_osacks$VH.set(seg, x);
    }
    public static long sctpi_osacks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_osacks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_osacks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_osacks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_opackets$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_opackets"));
    public static VarHandle sctpi_opackets$VH() {
        return sctp_info.sctpi_opackets$VH;
    }
    public static long sctpi_opackets$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_opackets$VH.get(seg);
    }
    public static void sctpi_opackets$set( MemorySegment seg, long x) {
        sctp_info.sctpi_opackets$VH.set(seg, x);
    }
    public static long sctpi_opackets$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_opackets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_opackets$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_opackets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_ipackets$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_ipackets"));
    public static VarHandle sctpi_ipackets$VH() {
        return sctp_info.sctpi_ipackets$VH;
    }
    public static long sctpi_ipackets$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_ipackets$VH.get(seg);
    }
    public static void sctpi_ipackets$set( MemorySegment seg, long x) {
        sctp_info.sctpi_ipackets$VH.set(seg, x);
    }
    public static long sctpi_ipackets$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_ipackets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_ipackets$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_ipackets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_rtxchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_rtxchunks"));
    public static VarHandle sctpi_rtxchunks$VH() {
        return sctp_info.sctpi_rtxchunks$VH;
    }
    public static long sctpi_rtxchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_rtxchunks$VH.get(seg);
    }
    public static void sctpi_rtxchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_rtxchunks$VH.set(seg, x);
    }
    public static long sctpi_rtxchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_rtxchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_rtxchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_rtxchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_outofseqtsns$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_outofseqtsns"));
    public static VarHandle sctpi_outofseqtsns$VH() {
        return sctp_info.sctpi_outofseqtsns$VH;
    }
    public static long sctpi_outofseqtsns$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_outofseqtsns$VH.get(seg);
    }
    public static void sctpi_outofseqtsns$set( MemorySegment seg, long x) {
        sctp_info.sctpi_outofseqtsns$VH.set(seg, x);
    }
    public static long sctpi_outofseqtsns$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_outofseqtsns$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_outofseqtsns$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_outofseqtsns$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_idupchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_idupchunks"));
    public static VarHandle sctpi_idupchunks$VH() {
        return sctp_info.sctpi_idupchunks$VH;
    }
    public static long sctpi_idupchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_idupchunks$VH.get(seg);
    }
    public static void sctpi_idupchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_idupchunks$VH.set(seg, x);
    }
    public static long sctpi_idupchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_idupchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_idupchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_idupchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_gapcnt$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_gapcnt"));
    public static VarHandle sctpi_gapcnt$VH() {
        return sctp_info.sctpi_gapcnt$VH;
    }
    public static long sctpi_gapcnt$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_gapcnt$VH.get(seg);
    }
    public static void sctpi_gapcnt$set( MemorySegment seg, long x) {
        sctp_info.sctpi_gapcnt$VH.set(seg, x);
    }
    public static long sctpi_gapcnt$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_gapcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_gapcnt$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_gapcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_ouodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_ouodchunks"));
    public static VarHandle sctpi_ouodchunks$VH() {
        return sctp_info.sctpi_ouodchunks$VH;
    }
    public static long sctpi_ouodchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_ouodchunks$VH.get(seg);
    }
    public static void sctpi_ouodchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_ouodchunks$VH.set(seg, x);
    }
    public static long sctpi_ouodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_ouodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_ouodchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_ouodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_iuodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_iuodchunks"));
    public static VarHandle sctpi_iuodchunks$VH() {
        return sctp_info.sctpi_iuodchunks$VH;
    }
    public static long sctpi_iuodchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_iuodchunks$VH.get(seg);
    }
    public static void sctpi_iuodchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_iuodchunks$VH.set(seg, x);
    }
    public static long sctpi_iuodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_iuodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_iuodchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_iuodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_oodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_oodchunks"));
    public static VarHandle sctpi_oodchunks$VH() {
        return sctp_info.sctpi_oodchunks$VH;
    }
    public static long sctpi_oodchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_oodchunks$VH.get(seg);
    }
    public static void sctpi_oodchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_oodchunks$VH.set(seg, x);
    }
    public static long sctpi_oodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_oodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_oodchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_oodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_iodchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_iodchunks"));
    public static VarHandle sctpi_iodchunks$VH() {
        return sctp_info.sctpi_iodchunks$VH;
    }
    public static long sctpi_iodchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_iodchunks$VH.get(seg);
    }
    public static void sctpi_iodchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_iodchunks$VH.set(seg, x);
    }
    public static long sctpi_iodchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_iodchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_iodchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_iodchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_octrlchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_octrlchunks"));
    public static VarHandle sctpi_octrlchunks$VH() {
        return sctp_info.sctpi_octrlchunks$VH;
    }
    public static long sctpi_octrlchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_octrlchunks$VH.get(seg);
    }
    public static void sctpi_octrlchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_octrlchunks$VH.set(seg, x);
    }
    public static long sctpi_octrlchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_octrlchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_octrlchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_octrlchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_ictrlchunks$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_ictrlchunks"));
    public static VarHandle sctpi_ictrlchunks$VH() {
        return sctp_info.sctpi_ictrlchunks$VH;
    }
    public static long sctpi_ictrlchunks$get(MemorySegment seg) {
        return (long)sctp_info.sctpi_ictrlchunks$VH.get(seg);
    }
    public static void sctpi_ictrlchunks$set( MemorySegment seg, long x) {
        sctp_info.sctpi_ictrlchunks$VH.set(seg, x);
    }
    public static long sctpi_ictrlchunks$get(MemorySegment seg, long index) {
        return (long)sctp_info.sctpi_ictrlchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_ictrlchunks$set(MemorySegment seg, long index, long x) {
        sctp_info.sctpi_ictrlchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sctpi_p_address$slice(MemorySegment seg) {
        return seg.asSlice(168, 128);
    }
    static final VarHandle sctpi_p_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_state"));
    public static VarHandle sctpi_p_state$VH() {
        return sctp_info.sctpi_p_state$VH;
    }
    public static int sctpi_p_state$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_state$VH.get(seg);
    }
    public static void sctpi_p_state$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_state$VH.set(seg, x);
    }
    public static int sctpi_p_state$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_state$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_cwnd$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_cwnd"));
    public static VarHandle sctpi_p_cwnd$VH() {
        return sctp_info.sctpi_p_cwnd$VH;
    }
    public static int sctpi_p_cwnd$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_cwnd$VH.get(seg);
    }
    public static void sctpi_p_cwnd$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_cwnd$VH.set(seg, x);
    }
    public static int sctpi_p_cwnd$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_cwnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_cwnd$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_cwnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_srtt$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_srtt"));
    public static VarHandle sctpi_p_srtt$VH() {
        return sctp_info.sctpi_p_srtt$VH;
    }
    public static int sctpi_p_srtt$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_srtt$VH.get(seg);
    }
    public static void sctpi_p_srtt$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_srtt$VH.set(seg, x);
    }
    public static int sctpi_p_srtt$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_srtt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_srtt$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_srtt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_rto$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_rto"));
    public static VarHandle sctpi_p_rto$VH() {
        return sctp_info.sctpi_p_rto$VH;
    }
    public static int sctpi_p_rto$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_rto$VH.get(seg);
    }
    public static void sctpi_p_rto$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_rto$VH.set(seg, x);
    }
    public static int sctpi_p_rto$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_rto$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_rto$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_rto$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_hbinterval$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_p_hbinterval"));
    public static VarHandle sctpi_p_hbinterval$VH() {
        return sctp_info.sctpi_p_hbinterval$VH;
    }
    public static int sctpi_p_hbinterval$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_hbinterval$VH.get(seg);
    }
    public static void sctpi_p_hbinterval$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_hbinterval$VH.set(seg, x);
    }
    public static int sctpi_p_hbinterval$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_hbinterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_hbinterval$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_hbinterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_pathmaxrxt$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_p_pathmaxrxt"));
    public static VarHandle sctpi_p_pathmaxrxt$VH() {
        return sctp_info.sctpi_p_pathmaxrxt$VH;
    }
    public static int sctpi_p_pathmaxrxt$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_pathmaxrxt$VH.get(seg);
    }
    public static void sctpi_p_pathmaxrxt$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_pathmaxrxt$VH.set(seg, x);
    }
    public static int sctpi_p_pathmaxrxt$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_pathmaxrxt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_pathmaxrxt$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_pathmaxrxt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_sackdelay$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_sackdelay"));
    public static VarHandle sctpi_p_sackdelay$VH() {
        return sctp_info.sctpi_p_sackdelay$VH;
    }
    public static int sctpi_p_sackdelay$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_sackdelay$VH.get(seg);
    }
    public static void sctpi_p_sackdelay$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_sackdelay$VH.set(seg, x);
    }
    public static int sctpi_p_sackdelay$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_sackdelay$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_sackdelay$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_sackdelay$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_sackfreq$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_sackfreq"));
    public static VarHandle sctpi_p_sackfreq$VH() {
        return sctp_info.sctpi_p_sackfreq$VH;
    }
    public static int sctpi_p_sackfreq$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_sackfreq$VH.get(seg);
    }
    public static void sctpi_p_sackfreq$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_sackfreq$VH.set(seg, x);
    }
    public static int sctpi_p_sackfreq$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_sackfreq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_sackfreq$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_sackfreq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_ssthresh$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_ssthresh"));
    public static VarHandle sctpi_p_ssthresh$VH() {
        return sctp_info.sctpi_p_ssthresh$VH;
    }
    public static int sctpi_p_ssthresh$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_ssthresh$VH.get(seg);
    }
    public static void sctpi_p_ssthresh$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_ssthresh$VH.set(seg, x);
    }
    public static int sctpi_p_ssthresh$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_ssthresh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_ssthresh$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_ssthresh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_partial_bytes_acked$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_p_partial_bytes_acked"));
    public static VarHandle sctpi_p_partial_bytes_acked$VH() {
        return sctp_info.sctpi_p_partial_bytes_acked$VH;
    }
    public static int sctpi_p_partial_bytes_acked$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_partial_bytes_acked$VH.get(seg);
    }
    public static void sctpi_p_partial_bytes_acked$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_partial_bytes_acked$VH.set(seg, x);
    }
    public static int sctpi_p_partial_bytes_acked$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_partial_bytes_acked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_partial_bytes_acked$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_partial_bytes_acked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_flight_size$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_p_flight_size"));
    public static VarHandle sctpi_p_flight_size$VH() {
        return sctp_info.sctpi_p_flight_size$VH;
    }
    public static int sctpi_p_flight_size$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_p_flight_size$VH.get(seg);
    }
    public static void sctpi_p_flight_size$set( MemorySegment seg, int x) {
        sctp_info.sctpi_p_flight_size$VH.set(seg, x);
    }
    public static int sctpi_p_flight_size$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_p_flight_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_flight_size$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_p_flight_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_p_error$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_p_error"));
    public static VarHandle sctpi_p_error$VH() {
        return sctp_info.sctpi_p_error$VH;
    }
    public static short sctpi_p_error$get(MemorySegment seg) {
        return (short)sctp_info.sctpi_p_error$VH.get(seg);
    }
    public static void sctpi_p_error$set( MemorySegment seg, short x) {
        sctp_info.sctpi_p_error$VH.set(seg, x);
    }
    public static short sctpi_p_error$get(MemorySegment seg, long index) {
        return (short)sctp_info.sctpi_p_error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_p_error$set(MemorySegment seg, long index, short x) {
        sctp_info.sctpi_p_error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __reserved2$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("__reserved2"));
    public static VarHandle __reserved2$VH() {
        return sctp_info.__reserved2$VH;
    }
    public static short __reserved2$get(MemorySegment seg) {
        return (short)sctp_info.__reserved2$VH.get(seg);
    }
    public static void __reserved2$set( MemorySegment seg, short x) {
        sctp_info.__reserved2$VH.set(seg, x);
    }
    public static short __reserved2$get(MemorySegment seg, long index) {
        return (short)sctp_info.__reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __reserved2$set(MemorySegment seg, long index, short x) {
        sctp_info.__reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_autoclose$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_s_autoclose"));
    public static VarHandle sctpi_s_autoclose$VH() {
        return sctp_info.sctpi_s_autoclose$VH;
    }
    public static int sctpi_s_autoclose$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_s_autoclose$VH.get(seg);
    }
    public static void sctpi_s_autoclose$set( MemorySegment seg, int x) {
        sctp_info.sctpi_s_autoclose$VH.set(seg, x);
    }
    public static int sctpi_s_autoclose$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_s_autoclose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_autoclose$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_s_autoclose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_adaptation_ind$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_s_adaptation_ind"));
    public static VarHandle sctpi_s_adaptation_ind$VH() {
        return sctp_info.sctpi_s_adaptation_ind$VH;
    }
    public static int sctpi_s_adaptation_ind$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_s_adaptation_ind$VH.get(seg);
    }
    public static void sctpi_s_adaptation_ind$set( MemorySegment seg, int x) {
        sctp_info.sctpi_s_adaptation_ind$VH.set(seg, x);
    }
    public static int sctpi_s_adaptation_ind$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_s_adaptation_ind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_adaptation_ind$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_s_adaptation_ind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_pd_point$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_s_pd_point"));
    public static VarHandle sctpi_s_pd_point$VH() {
        return sctp_info.sctpi_s_pd_point$VH;
    }
    public static int sctpi_s_pd_point$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_s_pd_point$VH.get(seg);
    }
    public static void sctpi_s_pd_point$set( MemorySegment seg, int x) {
        sctp_info.sctpi_s_pd_point$VH.set(seg, x);
    }
    public static int sctpi_s_pd_point$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_s_pd_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_pd_point$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_s_pd_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_nodelay$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_s_nodelay"));
    public static VarHandle sctpi_s_nodelay$VH() {
        return sctp_info.sctpi_s_nodelay$VH;
    }
    public static byte sctpi_s_nodelay$get(MemorySegment seg) {
        return (byte)sctp_info.sctpi_s_nodelay$VH.get(seg);
    }
    public static void sctpi_s_nodelay$set( MemorySegment seg, byte x) {
        sctp_info.sctpi_s_nodelay$VH.set(seg, x);
    }
    public static byte sctpi_s_nodelay$get(MemorySegment seg, long index) {
        return (byte)sctp_info.sctpi_s_nodelay$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_nodelay$set(MemorySegment seg, long index, byte x) {
        sctp_info.sctpi_s_nodelay$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_disable_fragments$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_s_disable_fragments"));
    public static VarHandle sctpi_s_disable_fragments$VH() {
        return sctp_info.sctpi_s_disable_fragments$VH;
    }
    public static byte sctpi_s_disable_fragments$get(MemorySegment seg) {
        return (byte)sctp_info.sctpi_s_disable_fragments$VH.get(seg);
    }
    public static void sctpi_s_disable_fragments$set( MemorySegment seg, byte x) {
        sctp_info.sctpi_s_disable_fragments$VH.set(seg, x);
    }
    public static byte sctpi_s_disable_fragments$get(MemorySegment seg, long index) {
        return (byte)sctp_info.sctpi_s_disable_fragments$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_disable_fragments$set(MemorySegment seg, long index, byte x) {
        sctp_info.sctpi_s_disable_fragments$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_v4mapped$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_s_v4mapped"));
    public static VarHandle sctpi_s_v4mapped$VH() {
        return sctp_info.sctpi_s_v4mapped$VH;
    }
    public static byte sctpi_s_v4mapped$get(MemorySegment seg) {
        return (byte)sctp_info.sctpi_s_v4mapped$VH.get(seg);
    }
    public static void sctpi_s_v4mapped$set( MemorySegment seg, byte x) {
        sctp_info.sctpi_s_v4mapped$VH.set(seg, x);
    }
    public static byte sctpi_s_v4mapped$get(MemorySegment seg, long index) {
        return (byte)sctp_info.sctpi_s_v4mapped$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_v4mapped$set(MemorySegment seg, long index, byte x) {
        sctp_info.sctpi_s_v4mapped$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_frag_interleave$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctpi_s_frag_interleave"));
    public static VarHandle sctpi_s_frag_interleave$VH() {
        return sctp_info.sctpi_s_frag_interleave$VH;
    }
    public static byte sctpi_s_frag_interleave$get(MemorySegment seg) {
        return (byte)sctp_info.sctpi_s_frag_interleave$VH.get(seg);
    }
    public static void sctpi_s_frag_interleave$set( MemorySegment seg, byte x) {
        sctp_info.sctpi_s_frag_interleave$VH.set(seg, x);
    }
    public static byte sctpi_s_frag_interleave$get(MemorySegment seg, long index) {
        return (byte)sctp_info.sctpi_s_frag_interleave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_frag_interleave$set(MemorySegment seg, long index, byte x) {
        sctp_info.sctpi_s_frag_interleave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctpi_s_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sctpi_s_type"));
    public static VarHandle sctpi_s_type$VH() {
        return sctp_info.sctpi_s_type$VH;
    }
    public static int sctpi_s_type$get(MemorySegment seg) {
        return (int)sctp_info.sctpi_s_type$VH.get(seg);
    }
    public static void sctpi_s_type$set( MemorySegment seg, int x) {
        sctp_info.sctpi_s_type$VH.set(seg, x);
    }
    public static int sctpi_s_type$get(MemorySegment seg, long index) {
        return (int)sctp_info.sctpi_s_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctpi_s_type$set(MemorySegment seg, long index, int x) {
        sctp_info.sctpi_s_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __reserved3$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("__reserved3"));
    public static VarHandle __reserved3$VH() {
        return sctp_info.__reserved3$VH;
    }
    public static int __reserved3$get(MemorySegment seg) {
        return (int)sctp_info.__reserved3$VH.get(seg);
    }
    public static void __reserved3$set( MemorySegment seg, int x) {
        sctp_info.__reserved3$VH.set(seg, x);
    }
    public static int __reserved3$get(MemorySegment seg, long index) {
        return (int)sctp_info.__reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __reserved3$set(MemorySegment seg, long index, int x) {
        sctp_info.__reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


