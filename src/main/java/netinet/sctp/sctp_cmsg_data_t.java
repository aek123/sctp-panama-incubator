// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_cmsg_data_t {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_CHAR$LAYOUT.withName("raw"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sinit_num_ostreams"),
            Constants$root.C_SHORT$LAYOUT.withName("sinit_max_instreams"),
            Constants$root.C_SHORT$LAYOUT.withName("sinit_max_attempts"),
            Constants$root.C_SHORT$LAYOUT.withName("sinit_max_init_timeo")
        ).withName("init"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sinfo_stream"),
            Constants$root.C_SHORT$LAYOUT.withName("sinfo_ssn"),
            Constants$root.C_SHORT$LAYOUT.withName("sinfo_flags"),
            MemoryLayout.paddingLayout(16),
            Constants$root.C_INT$LAYOUT.withName("sinfo_ppid"),
            Constants$root.C_INT$LAYOUT.withName("sinfo_context"),
            Constants$root.C_INT$LAYOUT.withName("sinfo_timetolive"),
            Constants$root.C_INT$LAYOUT.withName("sinfo_tsn"),
            Constants$root.C_INT$LAYOUT.withName("sinfo_cumtsn"),
            Constants$root.C_INT$LAYOUT.withName("sinfo_assoc_id")
        ).withName("sndrcv")
    );
    public static MemoryLayout $LAYOUT() {
        return sctp_cmsg_data_t.$union$LAYOUT;
    }
    static final VarHandle raw$VH = $union$LAYOUT.varHandle(PathElement.groupElement("raw"));
    public static VarHandle raw$VH() {
        return sctp_cmsg_data_t.raw$VH;
    }
    public static byte raw$get(MemorySegment seg) {
        return (byte)sctp_cmsg_data_t.raw$VH.get(seg);
    }
    public static void raw$set( MemorySegment seg, byte x) {
        sctp_cmsg_data_t.raw$VH.set(seg, x);
    }
    public static byte raw$get(MemorySegment seg, long index) {
        return (byte)sctp_cmsg_data_t.raw$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw$set(MemorySegment seg, long index, byte x) {
        sctp_cmsg_data_t.raw$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment init$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment sndrcv$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


