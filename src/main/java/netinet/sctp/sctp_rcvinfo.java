// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_rcvinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("rcv_sid"),
        Constants$root.C_SHORT$LAYOUT.withName("rcv_ssn"),
        Constants$root.C_SHORT$LAYOUT.withName("rcv_flags"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("rcv_ppid"),
        Constants$root.C_INT$LAYOUT.withName("rcv_tsn"),
        Constants$root.C_INT$LAYOUT.withName("rcv_cumtsn"),
        Constants$root.C_INT$LAYOUT.withName("rcv_context"),
        Constants$root.C_INT$LAYOUT.withName("rcv_assoc_id")
    ).withName("sctp_rcvinfo");
    public static MemoryLayout $LAYOUT() {
        return sctp_rcvinfo.$struct$LAYOUT;
    }
    static final VarHandle rcv_sid$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_sid"));
    public static VarHandle rcv_sid$VH() {
        return sctp_rcvinfo.rcv_sid$VH;
    }
    public static short rcv_sid$get(MemorySegment seg) {
        return (short)sctp_rcvinfo.rcv_sid$VH.get(seg);
    }
    public static void rcv_sid$set( MemorySegment seg, short x) {
        sctp_rcvinfo.rcv_sid$VH.set(seg, x);
    }
    public static short rcv_sid$get(MemorySegment seg, long index) {
        return (short)sctp_rcvinfo.rcv_sid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_sid$set(MemorySegment seg, long index, short x) {
        sctp_rcvinfo.rcv_sid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_ssn$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_ssn"));
    public static VarHandle rcv_ssn$VH() {
        return sctp_rcvinfo.rcv_ssn$VH;
    }
    public static short rcv_ssn$get(MemorySegment seg) {
        return (short)sctp_rcvinfo.rcv_ssn$VH.get(seg);
    }
    public static void rcv_ssn$set( MemorySegment seg, short x) {
        sctp_rcvinfo.rcv_ssn$VH.set(seg, x);
    }
    public static short rcv_ssn$get(MemorySegment seg, long index) {
        return (short)sctp_rcvinfo.rcv_ssn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_ssn$set(MemorySegment seg, long index, short x) {
        sctp_rcvinfo.rcv_ssn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_flags$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_flags"));
    public static VarHandle rcv_flags$VH() {
        return sctp_rcvinfo.rcv_flags$VH;
    }
    public static short rcv_flags$get(MemorySegment seg) {
        return (short)sctp_rcvinfo.rcv_flags$VH.get(seg);
    }
    public static void rcv_flags$set( MemorySegment seg, short x) {
        sctp_rcvinfo.rcv_flags$VH.set(seg, x);
    }
    public static short rcv_flags$get(MemorySegment seg, long index) {
        return (short)sctp_rcvinfo.rcv_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_flags$set(MemorySegment seg, long index, short x) {
        sctp_rcvinfo.rcv_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_ppid$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_ppid"));
    public static VarHandle rcv_ppid$VH() {
        return sctp_rcvinfo.rcv_ppid$VH;
    }
    public static int rcv_ppid$get(MemorySegment seg) {
        return (int)sctp_rcvinfo.rcv_ppid$VH.get(seg);
    }
    public static void rcv_ppid$set( MemorySegment seg, int x) {
        sctp_rcvinfo.rcv_ppid$VH.set(seg, x);
    }
    public static int rcv_ppid$get(MemorySegment seg, long index) {
        return (int)sctp_rcvinfo.rcv_ppid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_ppid$set(MemorySegment seg, long index, int x) {
        sctp_rcvinfo.rcv_ppid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_tsn$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_tsn"));
    public static VarHandle rcv_tsn$VH() {
        return sctp_rcvinfo.rcv_tsn$VH;
    }
    public static int rcv_tsn$get(MemorySegment seg) {
        return (int)sctp_rcvinfo.rcv_tsn$VH.get(seg);
    }
    public static void rcv_tsn$set( MemorySegment seg, int x) {
        sctp_rcvinfo.rcv_tsn$VH.set(seg, x);
    }
    public static int rcv_tsn$get(MemorySegment seg, long index) {
        return (int)sctp_rcvinfo.rcv_tsn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_tsn$set(MemorySegment seg, long index, int x) {
        sctp_rcvinfo.rcv_tsn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_cumtsn$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_cumtsn"));
    public static VarHandle rcv_cumtsn$VH() {
        return sctp_rcvinfo.rcv_cumtsn$VH;
    }
    public static int rcv_cumtsn$get(MemorySegment seg) {
        return (int)sctp_rcvinfo.rcv_cumtsn$VH.get(seg);
    }
    public static void rcv_cumtsn$set( MemorySegment seg, int x) {
        sctp_rcvinfo.rcv_cumtsn$VH.set(seg, x);
    }
    public static int rcv_cumtsn$get(MemorySegment seg, long index) {
        return (int)sctp_rcvinfo.rcv_cumtsn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_cumtsn$set(MemorySegment seg, long index, int x) {
        sctp_rcvinfo.rcv_cumtsn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_context$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_context"));
    public static VarHandle rcv_context$VH() {
        return sctp_rcvinfo.rcv_context$VH;
    }
    public static int rcv_context$get(MemorySegment seg) {
        return (int)sctp_rcvinfo.rcv_context$VH.get(seg);
    }
    public static void rcv_context$set( MemorySegment seg, int x) {
        sctp_rcvinfo.rcv_context$VH.set(seg, x);
    }
    public static int rcv_context$get(MemorySegment seg, long index) {
        return (int)sctp_rcvinfo.rcv_context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_context$set(MemorySegment seg, long index, int x) {
        sctp_rcvinfo.rcv_context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_assoc_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("rcv_assoc_id"));
    public static VarHandle rcv_assoc_id$VH() {
        return sctp_rcvinfo.rcv_assoc_id$VH;
    }
    public static int rcv_assoc_id$get(MemorySegment seg) {
        return (int)sctp_rcvinfo.rcv_assoc_id$VH.get(seg);
    }
    public static void rcv_assoc_id$set( MemorySegment seg, int x) {
        sctp_rcvinfo.rcv_assoc_id$VH.set(seg, x);
    }
    public static int rcv_assoc_id$get(MemorySegment seg, long index) {
        return (int)sctp_rcvinfo.rcv_assoc_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_assoc_id$set(MemorySegment seg, long index, int x) {
        sctp_rcvinfo.rcv_assoc_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


