// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_assoc_change {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("sac_type"),
        Constants$root.C_SHORT$LAYOUT.withName("sac_flags"),
        Constants$root.C_INT$LAYOUT.withName("sac_length"),
        Constants$root.C_SHORT$LAYOUT.withName("sac_state"),
        Constants$root.C_SHORT$LAYOUT.withName("sac_error"),
        Constants$root.C_SHORT$LAYOUT.withName("sac_outbound_streams"),
        Constants$root.C_SHORT$LAYOUT.withName("sac_inbound_streams"),
        Constants$root.C_INT$LAYOUT.withName("sac_assoc_id"),
        MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("sac_info")
    ).withName("sctp_assoc_change");
    public static MemoryLayout $LAYOUT() {
        return sctp_assoc_change.$struct$LAYOUT;
    }
    static final VarHandle sac_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sac_type"));
    public static VarHandle sac_type$VH() {
        return sctp_assoc_change.sac_type$VH;
    }
    public static short sac_type$get(MemorySegment seg) {
        return (short)sctp_assoc_change.sac_type$VH.get(seg);
    }
    public static void sac_type$set( MemorySegment seg, short x) {
        sctp_assoc_change.sac_type$VH.set(seg, x);
    }
    public static short sac_type$get(MemorySegment seg, long index) {
        return (short)sctp_assoc_change.sac_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_type$set(MemorySegment seg, long index, short x) {
        sctp_assoc_change.sac_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sac_flags$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sac_flags"));
    public static VarHandle sac_flags$VH() {
        return sctp_assoc_change.sac_flags$VH;
    }
    public static short sac_flags$get(MemorySegment seg) {
        return (short)sctp_assoc_change.sac_flags$VH.get(seg);
    }
    public static void sac_flags$set( MemorySegment seg, short x) {
        sctp_assoc_change.sac_flags$VH.set(seg, x);
    }
    public static short sac_flags$get(MemorySegment seg, long index) {
        return (short)sctp_assoc_change.sac_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_flags$set(MemorySegment seg, long index, short x) {
        sctp_assoc_change.sac_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sac_length$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sac_length"));
    public static VarHandle sac_length$VH() {
        return sctp_assoc_change.sac_length$VH;
    }
    public static int sac_length$get(MemorySegment seg) {
        return (int)sctp_assoc_change.sac_length$VH.get(seg);
    }
    public static void sac_length$set( MemorySegment seg, int x) {
        sctp_assoc_change.sac_length$VH.set(seg, x);
    }
    public static int sac_length$get(MemorySegment seg, long index) {
        return (int)sctp_assoc_change.sac_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_length$set(MemorySegment seg, long index, int x) {
        sctp_assoc_change.sac_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sac_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sac_state"));
    public static VarHandle sac_state$VH() {
        return sctp_assoc_change.sac_state$VH;
    }
    public static short sac_state$get(MemorySegment seg) {
        return (short)sctp_assoc_change.sac_state$VH.get(seg);
    }
    public static void sac_state$set( MemorySegment seg, short x) {
        sctp_assoc_change.sac_state$VH.set(seg, x);
    }
    public static short sac_state$get(MemorySegment seg, long index) {
        return (short)sctp_assoc_change.sac_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_state$set(MemorySegment seg, long index, short x) {
        sctp_assoc_change.sac_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sac_error$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sac_error"));
    public static VarHandle sac_error$VH() {
        return sctp_assoc_change.sac_error$VH;
    }
    public static short sac_error$get(MemorySegment seg) {
        return (short)sctp_assoc_change.sac_error$VH.get(seg);
    }
    public static void sac_error$set( MemorySegment seg, short x) {
        sctp_assoc_change.sac_error$VH.set(seg, x);
    }
    public static short sac_error$get(MemorySegment seg, long index) {
        return (short)sctp_assoc_change.sac_error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_error$set(MemorySegment seg, long index, short x) {
        sctp_assoc_change.sac_error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sac_outbound_streams$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sac_outbound_streams"));
    public static VarHandle sac_outbound_streams$VH() {
        return sctp_assoc_change.sac_outbound_streams$VH;
    }
    public static short sac_outbound_streams$get(MemorySegment seg) {
        return (short)sctp_assoc_change.sac_outbound_streams$VH.get(seg);
    }
    public static void sac_outbound_streams$set( MemorySegment seg, short x) {
        sctp_assoc_change.sac_outbound_streams$VH.set(seg, x);
    }
    public static short sac_outbound_streams$get(MemorySegment seg, long index) {
        return (short)sctp_assoc_change.sac_outbound_streams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_outbound_streams$set(MemorySegment seg, long index, short x) {
        sctp_assoc_change.sac_outbound_streams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sac_inbound_streams$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sac_inbound_streams"));
    public static VarHandle sac_inbound_streams$VH() {
        return sctp_assoc_change.sac_inbound_streams$VH;
    }
    public static short sac_inbound_streams$get(MemorySegment seg) {
        return (short)sctp_assoc_change.sac_inbound_streams$VH.get(seg);
    }
    public static void sac_inbound_streams$set( MemorySegment seg, short x) {
        sctp_assoc_change.sac_inbound_streams$VH.set(seg, x);
    }
    public static short sac_inbound_streams$get(MemorySegment seg, long index) {
        return (short)sctp_assoc_change.sac_inbound_streams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_inbound_streams$set(MemorySegment seg, long index, short x) {
        sctp_assoc_change.sac_inbound_streams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sac_assoc_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sac_assoc_id"));
    public static VarHandle sac_assoc_id$VH() {
        return sctp_assoc_change.sac_assoc_id$VH;
    }
    public static int sac_assoc_id$get(MemorySegment seg) {
        return (int)sctp_assoc_change.sac_assoc_id$VH.get(seg);
    }
    public static void sac_assoc_id$set( MemorySegment seg, int x) {
        sctp_assoc_change.sac_assoc_id$VH.set(seg, x);
    }
    public static int sac_assoc_id$get(MemorySegment seg, long index) {
        return (int)sctp_assoc_change.sac_assoc_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sac_assoc_id$set(MemorySegment seg, long index, int x) {
        sctp_assoc_change.sac_assoc_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sac_info$slice(MemorySegment seg) {
        return seg.asSlice(20, 0);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


