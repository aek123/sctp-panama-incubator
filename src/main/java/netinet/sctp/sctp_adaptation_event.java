// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_adaptation_event {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("sai_type"),
        Constants$root.C_SHORT$LAYOUT.withName("sai_flags"),
        Constants$root.C_INT$LAYOUT.withName("sai_length"),
        Constants$root.C_INT$LAYOUT.withName("sai_adaptation_ind"),
        Constants$root.C_INT$LAYOUT.withName("sai_assoc_id")
    ).withName("sctp_adaptation_event");
    public static MemoryLayout $LAYOUT() {
        return sctp_adaptation_event.$struct$LAYOUT;
    }
    static final VarHandle sai_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sai_type"));
    public static VarHandle sai_type$VH() {
        return sctp_adaptation_event.sai_type$VH;
    }
    public static short sai_type$get(MemorySegment seg) {
        return (short)sctp_adaptation_event.sai_type$VH.get(seg);
    }
    public static void sai_type$set( MemorySegment seg, short x) {
        sctp_adaptation_event.sai_type$VH.set(seg, x);
    }
    public static short sai_type$get(MemorySegment seg, long index) {
        return (short)sctp_adaptation_event.sai_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sai_type$set(MemorySegment seg, long index, short x) {
        sctp_adaptation_event.sai_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sai_flags$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sai_flags"));
    public static VarHandle sai_flags$VH() {
        return sctp_adaptation_event.sai_flags$VH;
    }
    public static short sai_flags$get(MemorySegment seg) {
        return (short)sctp_adaptation_event.sai_flags$VH.get(seg);
    }
    public static void sai_flags$set( MemorySegment seg, short x) {
        sctp_adaptation_event.sai_flags$VH.set(seg, x);
    }
    public static short sai_flags$get(MemorySegment seg, long index) {
        return (short)sctp_adaptation_event.sai_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sai_flags$set(MemorySegment seg, long index, short x) {
        sctp_adaptation_event.sai_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sai_length$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sai_length"));
    public static VarHandle sai_length$VH() {
        return sctp_adaptation_event.sai_length$VH;
    }
    public static int sai_length$get(MemorySegment seg) {
        return (int)sctp_adaptation_event.sai_length$VH.get(seg);
    }
    public static void sai_length$set( MemorySegment seg, int x) {
        sctp_adaptation_event.sai_length$VH.set(seg, x);
    }
    public static int sai_length$get(MemorySegment seg, long index) {
        return (int)sctp_adaptation_event.sai_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sai_length$set(MemorySegment seg, long index, int x) {
        sctp_adaptation_event.sai_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sai_adaptation_ind$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sai_adaptation_ind"));
    public static VarHandle sai_adaptation_ind$VH() {
        return sctp_adaptation_event.sai_adaptation_ind$VH;
    }
    public static int sai_adaptation_ind$get(MemorySegment seg) {
        return (int)sctp_adaptation_event.sai_adaptation_ind$VH.get(seg);
    }
    public static void sai_adaptation_ind$set( MemorySegment seg, int x) {
        sctp_adaptation_event.sai_adaptation_ind$VH.set(seg, x);
    }
    public static int sai_adaptation_ind$get(MemorySegment seg, long index) {
        return (int)sctp_adaptation_event.sai_adaptation_ind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sai_adaptation_ind$set(MemorySegment seg, long index, int x) {
        sctp_adaptation_event.sai_adaptation_ind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sai_assoc_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sai_assoc_id"));
    public static VarHandle sai_assoc_id$VH() {
        return sctp_adaptation_event.sai_assoc_id$VH;
    }
    public static int sai_assoc_id$get(MemorySegment seg) {
        return (int)sctp_adaptation_event.sai_assoc_id$VH.get(seg);
    }
    public static void sai_assoc_id$set( MemorySegment seg, int x) {
        sctp_adaptation_event.sai_assoc_id$VH.set(seg, x);
    }
    public static int sai_assoc_id$get(MemorySegment seg, long index) {
        return (int)sctp_adaptation_event.sai_assoc_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sai_assoc_id$set(MemorySegment seg, long index, int x) {
        sctp_adaptation_event.sai_assoc_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


