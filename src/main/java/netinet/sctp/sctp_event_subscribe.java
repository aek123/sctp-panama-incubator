// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_event_subscribe {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("sctp_data_io_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_association_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_address_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_send_failure_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_peer_error_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_shutdown_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_partial_delivery_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_adaptation_layer_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_authentication_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_sender_dry_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_stream_reset_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_assoc_reset_event"),
        Constants$root.C_CHAR$LAYOUT.withName("sctp_stream_change_event")
    ).withName("sctp_event_subscribe");
    public static MemoryLayout $LAYOUT() {
        return sctp_event_subscribe.$struct$LAYOUT;
    }
    static final VarHandle sctp_data_io_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_data_io_event"));
    public static VarHandle sctp_data_io_event$VH() {
        return sctp_event_subscribe.sctp_data_io_event$VH;
    }
    public static byte sctp_data_io_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_data_io_event$VH.get(seg);
    }
    public static void sctp_data_io_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_data_io_event$VH.set(seg, x);
    }
    public static byte sctp_data_io_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_data_io_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_data_io_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_data_io_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_association_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_association_event"));
    public static VarHandle sctp_association_event$VH() {
        return sctp_event_subscribe.sctp_association_event$VH;
    }
    public static byte sctp_association_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_association_event$VH.get(seg);
    }
    public static void sctp_association_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_association_event$VH.set(seg, x);
    }
    public static byte sctp_association_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_association_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_association_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_association_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_address_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_address_event"));
    public static VarHandle sctp_address_event$VH() {
        return sctp_event_subscribe.sctp_address_event$VH;
    }
    public static byte sctp_address_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_address_event$VH.get(seg);
    }
    public static void sctp_address_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_address_event$VH.set(seg, x);
    }
    public static byte sctp_address_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_address_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_address_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_address_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_send_failure_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_send_failure_event"));
    public static VarHandle sctp_send_failure_event$VH() {
        return sctp_event_subscribe.sctp_send_failure_event$VH;
    }
    public static byte sctp_send_failure_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_send_failure_event$VH.get(seg);
    }
    public static void sctp_send_failure_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_send_failure_event$VH.set(seg, x);
    }
    public static byte sctp_send_failure_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_send_failure_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_send_failure_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_send_failure_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_peer_error_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_peer_error_event"));
    public static VarHandle sctp_peer_error_event$VH() {
        return sctp_event_subscribe.sctp_peer_error_event$VH;
    }
    public static byte sctp_peer_error_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_peer_error_event$VH.get(seg);
    }
    public static void sctp_peer_error_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_peer_error_event$VH.set(seg, x);
    }
    public static byte sctp_peer_error_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_peer_error_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_peer_error_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_peer_error_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_shutdown_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_shutdown_event"));
    public static VarHandle sctp_shutdown_event$VH() {
        return sctp_event_subscribe.sctp_shutdown_event$VH;
    }
    public static byte sctp_shutdown_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_shutdown_event$VH.get(seg);
    }
    public static void sctp_shutdown_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_shutdown_event$VH.set(seg, x);
    }
    public static byte sctp_shutdown_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_shutdown_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_shutdown_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_shutdown_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_partial_delivery_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_partial_delivery_event"));
    public static VarHandle sctp_partial_delivery_event$VH() {
        return sctp_event_subscribe.sctp_partial_delivery_event$VH;
    }
    public static byte sctp_partial_delivery_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_partial_delivery_event$VH.get(seg);
    }
    public static void sctp_partial_delivery_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_partial_delivery_event$VH.set(seg, x);
    }
    public static byte sctp_partial_delivery_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_partial_delivery_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_partial_delivery_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_partial_delivery_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_adaptation_layer_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_adaptation_layer_event"));
    public static VarHandle sctp_adaptation_layer_event$VH() {
        return sctp_event_subscribe.sctp_adaptation_layer_event$VH;
    }
    public static byte sctp_adaptation_layer_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_adaptation_layer_event$VH.get(seg);
    }
    public static void sctp_adaptation_layer_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_adaptation_layer_event$VH.set(seg, x);
    }
    public static byte sctp_adaptation_layer_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_adaptation_layer_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_adaptation_layer_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_adaptation_layer_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_authentication_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_authentication_event"));
    public static VarHandle sctp_authentication_event$VH() {
        return sctp_event_subscribe.sctp_authentication_event$VH;
    }
    public static byte sctp_authentication_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_authentication_event$VH.get(seg);
    }
    public static void sctp_authentication_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_authentication_event$VH.set(seg, x);
    }
    public static byte sctp_authentication_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_authentication_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_authentication_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_authentication_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_sender_dry_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_sender_dry_event"));
    public static VarHandle sctp_sender_dry_event$VH() {
        return sctp_event_subscribe.sctp_sender_dry_event$VH;
    }
    public static byte sctp_sender_dry_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_sender_dry_event$VH.get(seg);
    }
    public static void sctp_sender_dry_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_sender_dry_event$VH.set(seg, x);
    }
    public static byte sctp_sender_dry_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_sender_dry_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_sender_dry_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_sender_dry_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_stream_reset_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_stream_reset_event"));
    public static VarHandle sctp_stream_reset_event$VH() {
        return sctp_event_subscribe.sctp_stream_reset_event$VH;
    }
    public static byte sctp_stream_reset_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_stream_reset_event$VH.get(seg);
    }
    public static void sctp_stream_reset_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_stream_reset_event$VH.set(seg, x);
    }
    public static byte sctp_stream_reset_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_stream_reset_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_stream_reset_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_stream_reset_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_assoc_reset_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_assoc_reset_event"));
    public static VarHandle sctp_assoc_reset_event$VH() {
        return sctp_event_subscribe.sctp_assoc_reset_event$VH;
    }
    public static byte sctp_assoc_reset_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_assoc_reset_event$VH.get(seg);
    }
    public static void sctp_assoc_reset_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_assoc_reset_event$VH.set(seg, x);
    }
    public static byte sctp_assoc_reset_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_assoc_reset_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_assoc_reset_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_assoc_reset_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sctp_stream_change_event$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sctp_stream_change_event"));
    public static VarHandle sctp_stream_change_event$VH() {
        return sctp_event_subscribe.sctp_stream_change_event$VH;
    }
    public static byte sctp_stream_change_event$get(MemorySegment seg) {
        return (byte)sctp_event_subscribe.sctp_stream_change_event$VH.get(seg);
    }
    public static void sctp_stream_change_event$set( MemorySegment seg, byte x) {
        sctp_event_subscribe.sctp_stream_change_event$VH.set(seg, x);
    }
    public static byte sctp_stream_change_event$get(MemorySegment seg, long index) {
        return (byte)sctp_event_subscribe.sctp_stream_change_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sctp_stream_change_event$set(MemorySegment seg, long index, byte x) {
        sctp_event_subscribe.sctp_stream_change_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


