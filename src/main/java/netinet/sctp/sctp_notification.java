// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_notification {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sn_type"),
            Constants$root.C_SHORT$LAYOUT.withName("sn_flags"),
            Constants$root.C_INT$LAYOUT.withName("sn_length")
        ).withName("sn_header"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sac_type"),
            Constants$root.C_SHORT$LAYOUT.withName("sac_flags"),
            Constants$root.C_INT$LAYOUT.withName("sac_length"),
            Constants$root.C_SHORT$LAYOUT.withName("sac_state"),
            Constants$root.C_SHORT$LAYOUT.withName("sac_error"),
            Constants$root.C_SHORT$LAYOUT.withName("sac_outbound_streams"),
            Constants$root.C_SHORT$LAYOUT.withName("sac_inbound_streams"),
            Constants$root.C_INT$LAYOUT.withName("sac_assoc_id"),
            MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("sac_info")
        ).withName("sn_assoc_change"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("spc_type"),
            Constants$root.C_SHORT$LAYOUT.withName("spc_flags"),
            Constants$root.C_INT$LAYOUT.withName("spc_length"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("ss_family"),
                MemoryLayout.sequenceLayout(118, Constants$root.C_CHAR$LAYOUT).withName("__ss_padding"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("__ss_align")
            ).withName("spc_aaddr"),
            Constants$root.C_INT$LAYOUT.withName("spc_state"),
            Constants$root.C_INT$LAYOUT.withName("spc_error"),
            Constants$root.C_INT$LAYOUT.withName("spc_assoc_id")
        ).withName("sn_paddr_change"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sre_type"),
            Constants$root.C_SHORT$LAYOUT.withName("sre_flags"),
            Constants$root.C_INT$LAYOUT.withName("sre_length"),
            Constants$root.C_SHORT$LAYOUT.withName("sre_error"),
            MemoryLayout.paddingLayout(16),
            Constants$root.C_INT$LAYOUT.withName("sre_assoc_id"),
            MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("sre_data")
        ).withName("sn_remote_error"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("ssf_type"),
            Constants$root.C_SHORT$LAYOUT.withName("ssf_flags"),
            Constants$root.C_INT$LAYOUT.withName("ssf_length"),
            Constants$root.C_INT$LAYOUT.withName("ssf_error"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sinfo_stream"),
                Constants$root.C_SHORT$LAYOUT.withName("sinfo_ssn"),
                Constants$root.C_SHORT$LAYOUT.withName("sinfo_flags"),
                MemoryLayout.paddingLayout(16),
                Constants$root.C_INT$LAYOUT.withName("sinfo_ppid"),
                Constants$root.C_INT$LAYOUT.withName("sinfo_context"),
                Constants$root.C_INT$LAYOUT.withName("sinfo_timetolive"),
                Constants$root.C_INT$LAYOUT.withName("sinfo_tsn"),
                Constants$root.C_INT$LAYOUT.withName("sinfo_cumtsn"),
                Constants$root.C_INT$LAYOUT.withName("sinfo_assoc_id")
            ).withName("ssf_info"),
            Constants$root.C_INT$LAYOUT.withName("ssf_assoc_id"),
            MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("ssf_data")
        ).withName("sn_send_failed"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sse_type"),
            Constants$root.C_SHORT$LAYOUT.withName("sse_flags"),
            Constants$root.C_INT$LAYOUT.withName("sse_length"),
            Constants$root.C_INT$LAYOUT.withName("sse_assoc_id")
        ).withName("sn_shutdown_event"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sai_type"),
            Constants$root.C_SHORT$LAYOUT.withName("sai_flags"),
            Constants$root.C_INT$LAYOUT.withName("sai_length"),
            Constants$root.C_INT$LAYOUT.withName("sai_adaptation_ind"),
            Constants$root.C_INT$LAYOUT.withName("sai_assoc_id")
        ).withName("sn_adaptation_event"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("pdapi_type"),
            Constants$root.C_SHORT$LAYOUT.withName("pdapi_flags"),
            Constants$root.C_INT$LAYOUT.withName("pdapi_length"),
            Constants$root.C_INT$LAYOUT.withName("pdapi_indication"),
            Constants$root.C_INT$LAYOUT.withName("pdapi_assoc_id"),
            Constants$root.C_INT$LAYOUT.withName("pdapi_stream"),
            Constants$root.C_INT$LAYOUT.withName("pdapi_seq")
        ).withName("sn_pdapi_event"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("auth_type"),
            Constants$root.C_SHORT$LAYOUT.withName("auth_flags"),
            Constants$root.C_INT$LAYOUT.withName("auth_length"),
            Constants$root.C_SHORT$LAYOUT.withName("auth_keynumber"),
            Constants$root.C_SHORT$LAYOUT.withName("auth_altkeynumber"),
            Constants$root.C_INT$LAYOUT.withName("auth_indication"),
            Constants$root.C_INT$LAYOUT.withName("auth_assoc_id")
        ).withName("sn_authkey_event"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sender_dry_type"),
            Constants$root.C_SHORT$LAYOUT.withName("sender_dry_flags"),
            Constants$root.C_INT$LAYOUT.withName("sender_dry_length"),
            Constants$root.C_INT$LAYOUT.withName("sender_dry_assoc_id")
        ).withName("sn_sender_dry_event"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("strreset_type"),
            Constants$root.C_SHORT$LAYOUT.withName("strreset_flags"),
            Constants$root.C_INT$LAYOUT.withName("strreset_length"),
            Constants$root.C_INT$LAYOUT.withName("strreset_assoc_id"),
            MemoryLayout.sequenceLayout(Constants$root.C_SHORT$LAYOUT).withName("strreset_stream_list")
        ).withName("sn_strreset_event"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("assocreset_type"),
            Constants$root.C_SHORT$LAYOUT.withName("assocreset_flags"),
            Constants$root.C_INT$LAYOUT.withName("assocreset_length"),
            Constants$root.C_INT$LAYOUT.withName("assocreset_assoc_id"),
            Constants$root.C_INT$LAYOUT.withName("assocreset_local_tsn"),
            Constants$root.C_INT$LAYOUT.withName("assocreset_remote_tsn")
        ).withName("sn_assocreset_event"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("strchange_type"),
            Constants$root.C_SHORT$LAYOUT.withName("strchange_flags"),
            Constants$root.C_INT$LAYOUT.withName("strchange_length"),
            Constants$root.C_INT$LAYOUT.withName("strchange_assoc_id"),
            Constants$root.C_SHORT$LAYOUT.withName("strchange_instrms"),
            Constants$root.C_SHORT$LAYOUT.withName("strchange_outstrms")
        ).withName("sn_strchange_event")
    ).withName("sctp_notification");
    public static MemoryLayout $LAYOUT() {
        return sctp_notification.$union$LAYOUT;
    }
    public static class sn_header {

        static final  GroupLayout sn_header$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sn_type"),
            Constants$root.C_SHORT$LAYOUT.withName("sn_flags"),
            Constants$root.C_INT$LAYOUT.withName("sn_length")
        );
        public static MemoryLayout $LAYOUT() {
            return sn_header.sn_header$struct$LAYOUT;
        }
        static final VarHandle sn_type$VH = sn_header$struct$LAYOUT.varHandle(PathElement.groupElement("sn_type"));
        public static VarHandle sn_type$VH() {
            return sn_header.sn_type$VH;
        }
        public static short sn_type$get(MemorySegment seg) {
            return (short)sn_header.sn_type$VH.get(seg);
        }
        public static void sn_type$set( MemorySegment seg, short x) {
            sn_header.sn_type$VH.set(seg, x);
        }
        public static short sn_type$get(MemorySegment seg, long index) {
            return (short)sn_header.sn_type$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sn_type$set(MemorySegment seg, long index, short x) {
            sn_header.sn_type$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle sn_flags$VH = sn_header$struct$LAYOUT.varHandle(PathElement.groupElement("sn_flags"));
        public static VarHandle sn_flags$VH() {
            return sn_header.sn_flags$VH;
        }
        public static short sn_flags$get(MemorySegment seg) {
            return (short)sn_header.sn_flags$VH.get(seg);
        }
        public static void sn_flags$set( MemorySegment seg, short x) {
            sn_header.sn_flags$VH.set(seg, x);
        }
        public static short sn_flags$get(MemorySegment seg, long index) {
            return (short)sn_header.sn_flags$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sn_flags$set(MemorySegment seg, long index, short x) {
            sn_header.sn_flags$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle sn_length$VH = sn_header$struct$LAYOUT.varHandle(PathElement.groupElement("sn_length"));
        public static VarHandle sn_length$VH() {
            return sn_header.sn_length$VH;
        }
        public static int sn_length$get(MemorySegment seg) {
            return (int)sn_header.sn_length$VH.get(seg);
        }
        public static void sn_length$set( MemorySegment seg, int x) {
            sn_header.sn_length$VH.set(seg, x);
        }
        public static int sn_length$get(MemorySegment seg, long index) {
            return (int)sn_header.sn_length$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sn_length$set(MemorySegment seg, long index, int x) {
            sn_header.sn_length$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment sn_header$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment sn_assoc_change$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment sn_paddr_change$slice(MemorySegment seg) {
        return seg.asSlice(0, 148);
    }
    public static MemorySegment sn_remote_error$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment sn_send_failed$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment sn_shutdown_event$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment sn_adaptation_event$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment sn_pdapi_event$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment sn_authkey_event$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment sn_sender_dry_event$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment sn_assocreset_event$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment sn_strchange_event$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


