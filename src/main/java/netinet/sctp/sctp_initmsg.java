// Generated by jextract

package netinet.sctp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class sctp_initmsg {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("sinit_num_ostreams"),
        Constants$root.C_SHORT$LAYOUT.withName("sinit_max_instreams"),
        Constants$root.C_SHORT$LAYOUT.withName("sinit_max_attempts"),
        Constants$root.C_SHORT$LAYOUT.withName("sinit_max_init_timeo")
    ).withName("sctp_initmsg");
    public static MemoryLayout $LAYOUT() {
        return sctp_initmsg.$struct$LAYOUT;
    }
    static final VarHandle sinit_num_ostreams$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sinit_num_ostreams"));
    public static VarHandle sinit_num_ostreams$VH() {
        return sctp_initmsg.sinit_num_ostreams$VH;
    }
    public static short sinit_num_ostreams$get(MemorySegment seg) {
        return (short)sctp_initmsg.sinit_num_ostreams$VH.get(seg);
    }
    public static void sinit_num_ostreams$set( MemorySegment seg, short x) {
        sctp_initmsg.sinit_num_ostreams$VH.set(seg, x);
    }
    public static short sinit_num_ostreams$get(MemorySegment seg, long index) {
        return (short)sctp_initmsg.sinit_num_ostreams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sinit_num_ostreams$set(MemorySegment seg, long index, short x) {
        sctp_initmsg.sinit_num_ostreams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sinit_max_instreams$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sinit_max_instreams"));
    public static VarHandle sinit_max_instreams$VH() {
        return sctp_initmsg.sinit_max_instreams$VH;
    }
    public static short sinit_max_instreams$get(MemorySegment seg) {
        return (short)sctp_initmsg.sinit_max_instreams$VH.get(seg);
    }
    public static void sinit_max_instreams$set( MemorySegment seg, short x) {
        sctp_initmsg.sinit_max_instreams$VH.set(seg, x);
    }
    public static short sinit_max_instreams$get(MemorySegment seg, long index) {
        return (short)sctp_initmsg.sinit_max_instreams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sinit_max_instreams$set(MemorySegment seg, long index, short x) {
        sctp_initmsg.sinit_max_instreams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sinit_max_attempts$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sinit_max_attempts"));
    public static VarHandle sinit_max_attempts$VH() {
        return sctp_initmsg.sinit_max_attempts$VH;
    }
    public static short sinit_max_attempts$get(MemorySegment seg) {
        return (short)sctp_initmsg.sinit_max_attempts$VH.get(seg);
    }
    public static void sinit_max_attempts$set( MemorySegment seg, short x) {
        sctp_initmsg.sinit_max_attempts$VH.set(seg, x);
    }
    public static short sinit_max_attempts$get(MemorySegment seg, long index) {
        return (short)sctp_initmsg.sinit_max_attempts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sinit_max_attempts$set(MemorySegment seg, long index, short x) {
        sctp_initmsg.sinit_max_attempts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sinit_max_init_timeo$VH = $struct$LAYOUT.varHandle(
            PathElement.groupElement("sinit_max_init_timeo"));
    public static VarHandle sinit_max_init_timeo$VH() {
        return sctp_initmsg.sinit_max_init_timeo$VH;
    }
    public static short sinit_max_init_timeo$get(MemorySegment seg) {
        return (short)sctp_initmsg.sinit_max_init_timeo$VH.get(seg);
    }
    public static void sinit_max_init_timeo$set( MemorySegment seg, short x) {
        sctp_initmsg.sinit_max_init_timeo$VH.set(seg, x);
    }
    public static short sinit_max_init_timeo$get(MemorySegment seg, long index) {
        return (short)sctp_initmsg.sinit_max_init_timeo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sinit_max_init_timeo$set(MemorySegment seg, long index, short x) {
        sctp_initmsg.sinit_max_init_timeo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


